// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  name         String?
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  events       Event[]
  draftEvents  DraftEvent[]
  participants EventParticipant[]
  tickets      Ticket[]
}

model Event {
  id                  Int           @id @default(autoincrement())
  title               String
  description         String
  category            EventCategory @default(OTHER)
  date                DateTime
  price               Float
  capacity            Int?
  currentParticipants Int           @default(0)
  isOnline            Boolean       @default(false)
  location            String?
  isCancelled         Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  organizerId Int
  organizer   User @relation(fields: [organizerId], references: [id])

  draftId Int?
  draft   DraftEvent?

  participants EventParticipant[]
  tickets      Ticket[]
}

model DraftEvent {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  category    EventCategory @default(OTHER)
  date        DateTime
  price       Float
  capacity    Int?
  isOnline    Boolean       @default(false)
  location    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizerId Int
  organizer   User @relation(fields: [organizerId], references: [id])

  originalEventId Int?   @unique
  originalEvent   Event? @relation(fields: [originalEventId], references: [id])

  @@unique([organizerId, originalEventId])
}

model EventParticipant {
  id           Int               @id @default(autoincrement())
  userId       Int
  eventId      Int
  status       ParticipantStatus @default(REGISTERED)
  registeredAt DateTime          @default(now())

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}

model Ticket {
  id               Int          @id @default(autoincrement())
  userId           Int
  eventId          Int
  status           TicketStatus @default(RESERVED)
  priceAtPurchase  Float
  paymentIntentId  String?      @unique
  paymentSessionId String?

  paidAt       DateTime?
  refundedAt   DateTime?
  failedReason String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@index([userId])
  @@index([eventId])
}

enum TicketStatus {
  RESERVED // Ödeme bekliyor veya rezerve edildi
  BOOKED // Ödeme tamamlandı, bilet kesin
  CANCELLED // Kullanıcı iptal etti veya ödeme başarısız oldu
  REFUNDED // İade edildi  
  REFUND_FAILED
  REFUND_REQUESTED
}

enum ParticipantStatus {
  REGISTERED
  CANCELLED
}

enum Role {
  USER
  ORGANIZER
  ADMIN
}

enum EventCategory {
  WORKSHOP
  SEMINAR
  CONCERT
  MEETUP
  WEBINAR
  OTHER
}
