
interface IEvent {
    id: ID!
    title: String!
    price: Float!
    description: String!
    category: EventCategory!
    date: String!
    updatedAt: String!
    isOnline: Boolean!
    location: String
}


type EventInfo implements IEvent {
    id: ID!
    title: String!
    price: Float!
    description: String!
    category: EventCategory!
    date: String!
    updatedAt: String!
    isOnline: Boolean!
    location: String

    organizerId: Int!
    organizer: UserInfo!
}

type Event implements IEvent {
    id: ID!
    title: String!
    price: Float!
    description: String!
    category: EventCategory!
    date: String!
    updatedAt: String!
    isOnline: Boolean!
    location: String
  
    createdAt: String!
    isCancelled: Boolean!
    capacity: Int
    currentParticipants: Int!

    organizerId: Int!
    participants: [EventParticipant!]!
    organizer: Organizer!
    draft: DraftEvent
    tickets: [Ticket!]!
}


type Query {
    publicEvents(input: PublicEventsQueryInput): [EventInfo!]!
    publicEventById(id: Int!): EventInfo!
    eventTickets(eventId: ID!, input: EventTicketsQueryInput): [Ticket!]!
}

input PublicEventsQueryInput {
    q: String
    category: EventCategory
    isOnline: Boolean
    location: String
    dateFrom: Date
    dateTo: Date
    priceFrom: Float
    priceTo: Float
    sortBy: EventSortBy
    sortOrder: SortOrder

    first: Int
    last: Int
    after: String
    before: String

    organizerId: Int
}

input EventTicketsQueryInput {
    first: Int
    last: Int
    after: String
    before: String

    status: TicketStatus
    userId: Int
}

enum EventCategory {
    WORKSHOP
    SEMINAR
    CONCERT
    MEETUP
    WEBINAR
    OTHER
}