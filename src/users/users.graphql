
interface IUser {
    id: ID!
    email: String!
    name: String
}

type UserInfo implements IUser {
    id: ID!
    email: String!
    name: String
}

type UserDetailInfo implements IUser {
    id: ID!
    email: String!
    name: String
    role: Role!
}

type User implements IUser {
    id: ID!
    email: String!
    name: String
    role: Role!

    registeredEvents: [EventInfo!]!
    tickets: [Ticket!]!
}

type Query {
    user: User!
    registeredEvents(input: UserEventsQueryInput): [EventInfo!]!
    userEventById(id: ID!): EventInfo!
}


input UserEventsQueryInput {
    q: String
    category: EventCategory
    isOnline: Boolean
    location: String
    dateFrom: Date
    dateTo: Date
    priceFrom: Float
    priceTo: Float
    sortBy: EventSortBy
    sortOrder: SortOrder

    first: Int
    last: Int
    after: String
    before: String

    organizerId: Int
    isCancelled: Boolean
    status: ParticipantStatus
}

enum Role {
  USER
  ORGANIZER
  ADMIN
}