

type Ticket {
    id: ID!
    userId: Int!
    eventId: Int!
    status: TicketStatus!
    priceAtPurchase: Float!
    paymentIntentId: String

    failedReason: String
    createdAt: String!
    updatedAt: String!
    paidAt: String
    refundedAt: String

    event: EventInfo!
}

type Query {
    tickets(input: UserTicketQueryInput): [Ticket!]!
    ticketById(id: ID!): Ticket!
}

type Mutation {
  purchaseTicket(eventId: Int!): CreateTicketPayload!
  cancelTicket(id: ID!): Boolean!
}

type CreateTicketPayload {
  checkoutUrl: String
  paymentSessionId: String
}

input UserTicketQueryInput {
  first: Int
  last: Int
  after: String
  before: String

  status: TicketStatus
  dateFrom: Date
  dateTo: Date
}

enum TicketStatus {
  RESERVED
  BOOKED
  CANCELLED
  REFUNDED
  REFUND_FAILED
  REFUND_REQUESTED
}